on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  android:
    name: Android Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Firebase JSON
        run: |
          echo "${{ secrets.FIREBASE_JSON }}" | base64 --decode > ./android/app/google-services.json
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json', 'yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Dependencies
        run: npm i

      - name: Setup Java & Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache NDK and specific build-tools
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ANDROID_HOME }}/ndk/27.1.12297006
            ${{ env.ANDROID_HOME }}/build-tools/36.0.0
            ${{ env.ANDROID_HOME }}/cmake
          key: ${{ runner.os }}-android-ndk-bt-${{ hashFiles('android/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-android-ndk-bt-

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/daemon
            ~/.gradle/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/build.gradle', 'android/app/build.gradle', 'android/gradle.properties', 'android/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Android build outputs
        uses: actions/cache@v4
        with:
          path: |
            android/.gradle
            android/app/build/intermediates
            android/app/build/generated
            android/app/build/tmp
          key: ${{ runner.os }}-android-build-${{ hashFiles('android/**/*.gradle*', 'android/**/*.properties', '**/*.js', '**/*.json') }}
          restore-keys: |
            ${{ runner.os }}-android-build-

      - name: Decode Release Keystore
        run: |
          # Remove newlines from base64 string and decode
          echo "${{ secrets.RELEASE_KEYSTORE }}" | tr -d '\n\r' | base64 --decode > ./android/app/geoguess-release.keystore

          # Verify the keystore file was created and has content
          if [ ! -f "./android/app/geoguess-release.keystore" ]; then
            echo "Error: Keystore file was not created!"
            exit 1
          fi

          # Check file size
          FILE_SIZE=$(stat -c%s "./android/app/geoguess-release.keystore")
          echo "Keystore file size: $FILE_SIZE bytes"

          if [ "$FILE_SIZE" -eq 0 ]; then
            echo "Error: Keystore file is empty!"
            exit 1
          fi

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleRelease -Pandroid.injected.signing.store.file=${{ github.workspace }}/android/app/geoguess-release.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.RELEASE_STORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.RELEASE_KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.RELEASE_KEY_PASSWORD }}

      - name: Verify APK Signing
        run: |
          LATEST_BUILD_TOOLS_VERSION=$(ls "$ANDROID_HOME/build-tools" | sort -r | head -n 1)
          APKSIGNER_PATH="$ANDROID_HOME/build-tools/$LATEST_BUILD_TOOLS_VERSION/apksigner"
          $APKSIGNER_PATH verify --verbose android/app/build/outputs/apk/release/app-release.apk
      - name: Display Signing Certificate Information
        run: |
          LATEST_BUILD_TOOLS_VERSION=$(ls "$ANDROID_HOME/build-tools" | sort -r | head -n 1)
          APKSIGNER_PATH="$ANDROID_HOME/build-tools/$LATEST_BUILD_TOOLS_VERSION/apksigner"
          $APKSIGNER_PATH verify --print-certs -v android/app/build/outputs/apk/release/app-release.apk
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: android/app/build/outputs/apk/release/app-release.apk

      - name: Upload APK to GitHub Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: android/app/build/outputs/apk/release/app-release.apk
          asset_name: Geoguess-${{ github.event.release.tag_name }}.apk
          asset_content_type: application/vnd.android.package-archive
