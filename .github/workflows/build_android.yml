on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  android:
    name: Android Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Firebase JSON
        run: |
          echo "${{ secrets.FIREBASE_JSON }}" | base64 --decode > ./android/app/google-services.json
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json', 'yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Dependencies
        run: npm i

      - name: Setup Java & Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/daemon
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/build.gradle', 'android/app/build.gradle', 'android/gradle.properties', 'android/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Decode Release Keystore
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 --decode > ./android/app/geoguess-release.keystore

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleRelease -Pandroid.injected.signing.store.file=./app/geoguess-release.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.RELEASE_STORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.RELEASE_KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.RELEASE_KEY_PASSWORD }}

      - name: Verify APK Signing
        run: |
          LATEST_BUILD_TOOLS_VERSION=$(ls "$ANDROID_HOME/build-tools" | sort -r | head -n 1)
          APKSIGNER_PATH="$ANDROID_HOME/build-tools/$LATEST_BUILD_TOOLS_VERSION/apksigner"
          $APKSIGNER_PATH verify --verbose android/app/build/outputs/apk/release/app-release.apk
      - name: Display Signing Certificate Information
        run: |
          LATEST_BUILD_TOOLS_VERSION=$(ls "$ANDROID_HOME/build-tools" | sort -r | head -n 1)
          APKSIGNER_PATH="$ANDROID_HOME/build-tools/$LATEST_BUILD_TOOLS_VERSION/apksigner"
          $APKSIGNER_PATH verify --print-certs -v android/app/build/outputs/apk/release/app-release.apk
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: android/app/build/outputs/apk/release/app-release.apk

      - name: Upload APK to GitHub Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: android/app/build/outputs/apk/release/app-release.apk
          asset_name: Geoguess-${{ github.event.release.tag_name }}.apk
          asset_content_type: application/vnd.android.package-archive
